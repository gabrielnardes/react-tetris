{"version":3,"sources":["gameHelpers.js","img/bg.png","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","reportWebVitals.js","index.js"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","shape","color","I","J","L","O","S","T","Z","randomTetromino","tetrominos","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","Cell","React","memo","Stage","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","console","log","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57e593af.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n    Array.from(Array(STAGE_HEIGHT), () =>\n        new Array(STAGE_WIDTH).fill([0, 'clear'])\n    )\n\nexport const checkCollision = (player, stage, {x: moveX, y: moveY }) => {\n    for (let y = 0; y < player.tetromino.length; y += 1) {\n        for (let x = 0; x < player.tetromino[y].length; x += 1) {\n            // 1. Check that we're on an actual Tetromino cell\n            if (player.tetromino[y][x] !== 0) {\n                if (\n                    // 2. Check that our move is inside the game areas height (y)\n                    // We shouldn't go through the bottom of the play area\n                    !stage[y + player.pos.y + moveY] ||\n\n                    // 3. Check that our move is inside the game areas width (x)\n                    !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n\n                    // 3. Check that the cell we're moving to isn't set to clear\n                    stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\n                ) {\n                    return true;\n                }\n            }\n        }\n    }\n}","export default __webpack_public_path__ + \"static/media/bg.d63cfd51.png\";","import styled from 'styled-components'\nimport bgImage from '../../img/bg.png'\n\nexport const StyledTetrisWrapper = styled.div`\n    width: 100vw;\n    height: 100vh;\n    background: url(${bgImage}) #000;\n    background-size: cover;\n    overflow: hidden;\n`;\n\nexport const StyledTetris = styled.div`\n    display: flex;\n    align-items: flex-start;\n    padding: 40px;\n    margin: 0 auto;\n    max-width: 900px;\n\n    aside {\n        width: 100%;\n        max-width: 200px;\n        display: block;\n        padding: 0 20px;\n    }\n`","export const TETROMINOS = {\n    0: { shape: [[0]], color: '0, 0, 0' },\n    I: {\n        shape: [\n           [0, 'I', 0, 0],\n           [0, 'I', 0, 0],\n           [0, 'I', 0, 0],\n           [0, 'I', 0, 0]\n        ],\n        color: '80, 227, 230',\n   },\n   J: {\n    shape: [\n       [ 0,  'J', 0, 0],\n       [ 0,  'J', 0, 0],\n       ['J', 'J', 0, 0],\n    ],\n    color: '36, 95, 223',\n    },\n    L: {\n        shape: [\n           [ 0, 'L',  0,   0],\n           [ 0, 'L',  0,   0],\n           [ 0, 'L', 'L' , 0],\n        ],\n        color: '223, 173, 36',\n    },\n    O: {\n        shape: [\n           [ 'O', 'O'],\n           [ 'O', 'O'],\n        ],\n        color: '223, 217, 36',\n    },\n    S: {\n        shape: [\n           [ 0,  'S', 'S'],\n           ['S', 'S',  0 ],\n           [ 0,   0,   0 ],\n        ],\n        color: '48, 211, 56',\n    },\n    T: {\n        shape: [\n           [ 0,   0,   0 ],\n           ['T', 'T', 'T'],\n           [ 0,  'T',  0 ],\n        ],\n        color: '132, 61, 198',\n    },\n    Z: {\n        shape: [\n           ['Z', 'Z',  0 ],\n           [ 0,  'Z', 'Z'],\n           [ 0,   0,   0 ],\n        ],\n        color: '227, 78, 78',\n    },\n}\n\nexport const randomTetromino = () => {\n    const tetrominos = 'IJLOSTZ';\n    const randTetromino = \n        tetrominos[Math.floor(Math.random() * tetrominos.length)];\n    return TETROMINOS[randTetromino];\n}\n","import { useState, useEffect } from \"react\";\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared ] = useState(0);\n\n    useEffect(() => {\n        setRowsCleared(0);\n\n        const sweepRows = newStage =>\n            newStage.reduce((ack, row) => {\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\n                    setRowsCleared(prev => prev + 1);\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n                    return ack;\n                }\n                ack.push(row);\n                return ack;\n            }, [])\n\n        const updateStage = prevStage => {\n            // First flush the stage\n            const newStage = prevStage.map(row => \n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n            );\n\n            // Then draw the tetromino\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if (value !== 0) {\n                        newStage[y + player.pos.y][x + player.pos.x] = [\n                            value,\n                            `${player.collided ? 'merged' : 'clear'}`,\n                        ];\n                    }\n                })\n            })\n            // Then check if we collided\n            if (player.collided) {\n                resetPlayer();\n                return sweepRows(newStage);\n            }\n\n            return newStage;\n        };\n\n        setStage(prev => updateStage(prev)); \n    }, [player, resetPlayer]);\n\n    return [stage, setStage, rowsCleared];\n};","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\n    display: grid;\n    grid-template-rows: repeat(\n        ${props => props.height},\n        calc(25vw / ${props => props.width})\n    );\n    grid-template-columns: repeat(${props => props.width}, 1fr);\n    grid-gap: 1px;\n    border: 2px solid #333;\n    width: 100%;\n    max-width: 25vw;\n    background: #111;\n`;","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n    width: auto;\n    background: rgba(${props => props.color}, 0.8);\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\n    border-bottom-color: rgba(${props => props.color}, 0.1);\n    border-right-color: rgba(${props => props.color}, 1);\n    border-top-color: rgba(${props => props.color}, 1);\n    border-left-color: rgba(${props => props.color}, 0.3);\n`","import React from \"react\";\nimport { StyledCell } from \"./styles/StyledCell\";\nimport { TETROMINOS } from \"../tetrominos\";\n\nconst Cell = ({ type }) => (\n    <StyledCell type={type} color={TETROMINOS[type].color} />\n)\n\nexport default React.memo(Cell);","import React from 'react';\nimport { StyledStage } from './styles/StyledStage';\nimport Cell from './Cell';\n\nconst Stage = ({ stage }) => (\n    <StyledStage width={stage[0].length} height={stage.length}>\n        {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]}/>))}\n    </StyledStage>\n);\n\nexport default Stage;","import styled from 'styled-components';\n\nexport const StyledDisplay = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center; \n  margin: 0 0 20px 0;\n  padding: 20px;\n  border: 4px solid #333;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  color: ${props => (props.gameOver ? 'red' : '#999')};\n  background: #000;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 0.8rem;\n`;","import React from 'react';\nimport { StyledDisplay } from './styles/StyledDisplay';\n\nconst Display = ({ gameOver, text }) => (\n    <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\n)\n\nexport default Display;","import styled from 'styled-components';\n\nexport const StyledStartButton = styled.button`\n  box-sizing: border-box;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  border: none;\n  color: white;\n  background: #333;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n  outline: none;\n  cursor: pointer;\n`;","import React from 'react';\nimport { StyledStartButton } from './styles/StyledStartButton';\n\nconst StartButton = ({ callback }) => (\n    <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\n)\n\nexport default StartButton;","import React, {useState} from 'react'\n\nimport { createStage, checkCollision } from '../gameHelpers';\n\n// Styled Components\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris'\n\n// Custom Hooks\nimport { useInterval } from '../hooks/useInterval'\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useGameStatus } from '../hooks/useGameStatus';\n\n// Components\nimport Stage from './Stage'\nimport Display from './Display'\nimport StartButton from './StartButton'\n\nconst Tetris = () => {\n    const [dropTime, setDropTime] = useState(null);\n    const [gameOver, setGameOver] = useState(false);\n\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n\n    console.log('re-render');\n\n    const movePlayer = dir => {\n        if (!checkCollision(player, stage, {x: dir, y: 0})) {\n            updatePlayerPos({ x: dir, y: 0})\n        }\n    }\n    \n    const startGame = () => {\n        console.log(\"Start game\");\n        setStage(createStage());\n        setDropTime(1000);\n        resetPlayer();\n        setGameOver(false);\n        setScore(0);\n        setRows(0);\n        setLevel(0);\n    }\n    \n    const drop = () => {\n        // Increase level when player has cleared 5 rows\n        if (rows > (level + 1) * 5) {\n            setLevel(prev => prev + 1);\n            // Also increase speed\n            setDropTime(1000 / (level + 1) + 200);\n        }\n\n        if (!checkCollision(player, stage, {x: 0, y: 1})) {\n            updatePlayerPos({x: 0, y: 1, collided: false})\n        } else {\n            if (player.pos.y < 1) {\n                console.log(\"GAME OVER\");\n                setGameOver(true);\n                setDropTime(null);\n            }\n            updatePlayerPos({x: 0, y: 0, collided: true});\n        }\n    }\n\n    const keyUp = ({ keyCode }) => {\n        if (!gameOver) {\n            if (keyCode === 40) {\n                setDropTime(1000 / (level + 1) + 200);\n            }\n        }\n    }\n\n    const dropPlayer = () => {\n        setDropTime(null);\n        drop();\n    }\n\n    const move = ({ keyCode }) => {\n        console.log(gameOver);\n        console.log(keyCode);\n\n        if (!gameOver) {\n            if (keyCode === 37) {\n                movePlayer(-1);\n            }\n            else if (keyCode === 39) {\n                movePlayer(1);\n            }\n            else if (keyCode === 40) {\n                dropPlayer();\n            }\n            else if (keyCode === 38) {\n                playerRotate(stage, 1);\n            }\n        }\n    }\n\n    useInterval(() => {\n        drop();\n    }, dropTime)\n\n    return (\n        <StyledTetrisWrapper \n            role=\"button\" \n            tabIndex=\"0\" \n            onKeyDown={e => move(e)} \n            onKeyUp={keyUp}\n        >\n            <StyledTetris>\n                <Stage stage={stage}/>\n                <aside>\n                    {gameOver ? (\n                        <Display gameOver={gameOver} text=\"Game Over\" />\n                    ) : (\n                    \n                        <div>\n                            <Display text={`Score: ${score}`} />\n                            <Display text={`Rows: ${rows}`} />\n                            <Display text={`Level: ${level}`} />\n                        </div>\n                    )}\n                    <StartButton callback={startGame} />\n                </aside>\n            </StyledTetris>\n        </StyledTetrisWrapper>\n    )\n}\n\nexport default Tetris","import { useState, useCallback } from \"react\";\nimport { checkCollision, STAGE_WIDTH } from \"../gameHelpers\";\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: {x: 0, y: 0 },\n        tetromino: TETROMINOS[0].shape,\n        collided: false,\n    });\n\n    const rotate = (matrix, dir) => {\n        // Make the rows to become cols (transpose)\n        const rotatedTetro = matrix.map((_, index) => \n            matrix.map(col => col[index]),\n        );\n\n        // Reverse each row to get a rotated matrix\n        if (dir > 0) return rotatedTetro.map(row => row.reverse());\n        return rotatedTetro.reverse();\n    }\n\n    const playerRotate = (stage, dir) => {\n        const clonedPlayer = JSON.parse(JSON.stringify(player))\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir)\n\n        const pos = clonedPlayer.pos.x;\n        let offset = 1;\n        while(checkCollision(clonedPlayer, stage, {x: 0, y: 0 })) {\n            clonedPlayer.pos.x += offset;\n            offset =-(offset + (offset > 0 ? 1 : -1));\n            if (offset > clonedPlayer.tetromino[0].length) {\n                rotate(clonedPlayer.tetromino, -dir);\n                clonedPlayer.pos.x = pos;\n                return;\n            }\n        }\n        setPlayer(clonedPlayer)\n    }\n\n    const updatePlayerPos = ({ x, y, collided }) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }))\n    }\n\n    const resetPlayer = useCallback(() => {\n        setPlayer({\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n    }, [])\n\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\n}","import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n    const [score, setScore] = useState(0);\n    const [rows, setRows] = useState(0);\n    const [level, setLevel] = useState(0);\n\n    const linePoints = [40, 100, 300, 1200];\n    \n    const calcScore = useCallback(() => {\n        // We have score\n        if (rowsCleared > 0) {\n            // This is how original Tetris score is calculated\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n            setRows(prev => prev + rowsCleared);\n        }\n    }, [level, linePoints, rowsCleared]);\n\n    useEffect(() => {\n        calcScore();\n    }, [calcScore, rowsCleared, score])\n\n    return [score, setScore, rows, setRows, level, setLevel]\n}","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className = \"App\">\n    <Tetris />\n  </div>\n);\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}